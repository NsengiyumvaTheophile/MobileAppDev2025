A regular function in Dart is a named block of code that performs a specific task. 
It can take parameters, execute statements, and optionally return a value.
Syntax:
returnType functionName(parameterType parameterName, ...) {
  // Function body
  // statements
  return value; // if returnType is not void
}
Usage:
To organize and reuse code.
To separate logic into meaningful units.
To perform tasks with given inputs and optionally provide outputs.

FUNCTION WITH PARAMETER IN DART

A function with parameters is a function that accepts inputs (called parameters or arguments) when it is called. 
These parameters allow you to pass data into the function so it can process or use the data inside its body.

SYNTAX:
returnType functionName(parameterType parameterName, ...) {
  // function body
}
USAGE:
To write flexible and reusable functions.
To process different input values without rewriting the function.
To perform operations based on the input data.

ARROW FUNCTION:

An arrow function (also called expression-bodied function) is a shorthand syntax for functions that contain only a single expression. 
It automatically returns the value of that expression without needing an explicit return keyword or curly braces.

SYNTAX:
returnType functionName(parameters) => expression;
USAGE:
To write clean, concise functions.
Often used for simple calculations

FUNCTION WITH OPTIONAL PARAMETER:
Optional parameters allow you to define functions that donâ€™t require all arguments to be passed every time.
SYNTAX:
returnType functionName([paramType param1, paramType param2]) {
  // function body
}

